{"ast":null,"code":"import React,{useReducer,useEffect}from'react';import{validate}from'../../util/validators';import'./Input.css';const inputReducer=(state,action)=>{switch(action.type){case'CHANGE':return{...state,value:action.val,isValid:validate(action.val,action.validators)};case'TOUCH':{return{...state,isTouched:true};}default:return state;}};const Input=props=>{const[inputState,dispatch]=useReducer(inputReducer,{value:props.initialValue||'',isTouched:false,isValid:props.initialValid||false});const{id,onInput}=props;const{value,isValid}=inputState;useEffect(()=>{onInput(id,value,isValid);},[id,value,isValid,onInput]);const changeHandler=event=>{dispatch({type:'CHANGE',val:event.target.value,validators:props.validators});};const touchHandler=()=>{dispatch({type:'TOUCH'});};const element=props.element==='input'?/*#__PURE__*/React.createElement(\"input\",{id:props.id,type:props.type,placeholder:props.placeholder,onChange:changeHandler,onBlur:touchHandler,value:inputState.value}):/*#__PURE__*/React.createElement(\"textarea\",{id:props.id,rows:props.rows||3,onChange:changeHandler,onBlur:touchHandler,value:inputState.value});return/*#__PURE__*/React.createElement(\"div\",{className:`form-control ${!inputState.isValid&&inputState.isTouched&&'form-control--invalid'}`},/*#__PURE__*/React.createElement(\"label\",{htmlFor:props.id},props.label),element,!inputState.isValid&&inputState.isTouched&&/*#__PURE__*/React.createElement(\"p\",null,props.errorText));};export default Input;","map":{"version":3,"names":["React","useReducer","useEffect","validate","inputReducer","state","action","type","value","val","isValid","validators","isTouched","Input","props","inputState","dispatch","initialValue","initialValid","id","onInput","changeHandler","event","target","touchHandler","element","createElement","placeholder","onChange","onBlur","rows","className","htmlFor","label","errorText"],"sources":["C:/Users/HP/Desktop/React/mern-project/frontend/src/shared/components/FormElements/Input.js"],"sourcesContent":["import React, { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n    case 'TOUCH': {\n      return {\n        ...state,\n        isTouched: true\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid)\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element =\n    props.element === 'input' ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${!inputState.isValid && inputState.isTouched &&\n        'form-control--invalid'}`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}