{"ast":null,"code":"import React,{useState,useContext}from'react';import Card from'../../shared/components/UIElements/Card';import Input from'../../shared/components/FormElements/Input';import Button from'../../shared/components/FormElements/Button';import ErrorModal from'../../shared/components/UIElements/ErrorModal';import LoadingSpinner from'../../shared/components/UIElements/LoadingSpinner';import{VALIDATOR_EMAIL,VALIDATOR_MINLENGTH,VALIDATOR_REQUIRE}from'../../shared/util/validators';import{useForm}from'../../shared/hooks/form-hook';import{useHttpClient}from'../../shared/hooks/http-hook';import{AuthContext}from'../../shared/context/auth-context';import'./Auth.css';const Auth=()=>{const auth=useContext(AuthContext);const[isLoginMode,setIsLoginMode]=useState(true);const{isLoading,error,sendRequest,clearError}=useHttpClient();const[formState,inputHandler,setFormData]=useForm({email:{value:'',isValid:false},password:{value:'',isValid:false}},false);const switchModeHandler=()=>{if(!isLoginMode){setFormData({...formState.inputs,name:undefined},formState.inputs.email.isValid&&formState.inputs.password.isValid);}else{setFormData({...formState.inputs,name:{value:'',isValid:false}},false);}setIsLoginMode(prevMode=>!prevMode);};const authSubmitHandler=async event=>{event.preventDefault();if(isLoginMode){try{const responseData=await sendRequest('http://localhost:5000/api/users/login','POST',JSON.stringify({email:formState.inputs.email.value,password:formState.inputs.password.value}),{'Content-Type':'application/json'});auth.login(responseData.user.id);}catch(err){}}else{try{const responseData=await sendRequest('http://localhost:5000/api/users/signup','POST',JSON.stringify({name:formState.inputs.name.value,email:formState.inputs.email.value,password:formState.inputs.password.value}),{'Content-Type':'application/json'});auth.login(responseData.user.id);}catch(err){}}};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(ErrorModal,{error:error,onClear:clearError}),/*#__PURE__*/React.createElement(Card,{className:\"authentication\"},isLoading&&/*#__PURE__*/React.createElement(LoadingSpinner,{asOverlay:true}),/*#__PURE__*/React.createElement(\"h2\",null,\"Login Required\"),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"form\",{onSubmit:authSubmitHandler},!isLoginMode&&/*#__PURE__*/React.createElement(Input,{element:\"input\",id:\"name\",type:\"text\",label:\"Your Name\",validators:[VALIDATOR_REQUIRE()],errorText:\"Please enter a name.\",onInput:inputHandler}),/*#__PURE__*/React.createElement(Input,{element:\"input\",id:\"email\",type:\"email\",label:\"E-Mail\",validators:[VALIDATOR_EMAIL()],errorText:\"Please enter a valid email address.\",onInput:inputHandler}),/*#__PURE__*/React.createElement(Input,{element:\"input\",id:\"password\",type:\"password\",label:\"Password\",validators:[VALIDATOR_MINLENGTH(6)],errorText:\"Please enter a valid password, at least 6 characters.\",onInput:inputHandler}),/*#__PURE__*/React.createElement(Button,{type:\"submit\",disabled:!formState.isValid},isLoginMode?'LOGIN':'SIGNUP')),/*#__PURE__*/React.createElement(Button,{inverse:true,onClick:switchModeHandler},\"SWITCH TO \",isLoginMode?'SIGNUP':'LOGIN')));};export default Auth;","map":{"version":3,"names":["React","useState","useContext","Card","Input","Button","ErrorModal","LoadingSpinner","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","useForm","useHttpClient","AuthContext","Auth","auth","isLoginMode","setIsLoginMode","isLoading","error","sendRequest","clearError","formState","inputHandler","setFormData","email","value","isValid","password","switchModeHandler","inputs","name","undefined","prevMode","authSubmitHandler","event","preventDefault","responseData","JSON","stringify","login","user","id","err","createElement","Fragment","onClear","className","asOverlay","onSubmit","element","type","label","validators","errorText","onInput","disabled","inverse","onClick"],"sources":["C:/Users/HP/Desktop/React/mern-project/frontend/src/user/pages/Auth.js"],"sourcesContent":["import React, { useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './Auth.css';\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false\n      },\n      password: {\n        value: '',\n        isValid: false\n      }\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: '',\n            isValid: false\n          }\n        },\n        false\n      );\n    }\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const authSubmitHandler = async event => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      try {\n        const responseData = await sendRequest(\n          'http://localhost:5000/api/users/login',\n          'POST',\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          }),\n          {\n            'Content-Type': 'application/json'\n          }\n        );\n        auth.login(responseData.user.id);\n      } catch (err) {}\n    } else {\n      try {\n        const responseData = await sendRequest(\n          'http://localhost:5000/api/users/signup',\n          'POST',\n          JSON.stringify({\n            name: formState.inputs.name.value,\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          }),\n          {\n            'Content-Type': 'application/json'\n          }\n        );\n\n        auth.login(responseData.user.id);\n      } catch (err) {}\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2>Login Required</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Your Name\"\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please enter a name.\"\n              onInput={inputHandler}\n            />\n          )}\n          <Input\n            element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            label=\"E-Mail\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address.\"\n            onInput={inputHandler}\n          />\n          <Input\n            element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid password, at least 6 characters.\"\n            onInput={inputHandler}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n        </Button>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Auth;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}